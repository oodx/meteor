# METEOR ENGINE TASK BOARD

## ðŸŽ¯ CURRENT FOCUS (2025-09-27)
- Roadmap: `docs/procs/ROADMAP.txt` â€” ME-1 âœ… COMPLETE â†’ ME-2 âœ… COMPLETE â†’ ME-3 in progress.
- Architecture references: `docs/ref/architecture/ENGINE_ENHANCEMENT.md`, `docs/ref/planning/ENGINE_TASKS.txt`.
- **ME-1 Status**: âœ… DELIVERED (8/8 SP, 100%) - Workspace foundations complete.
- **ME-2 Status**: âœ… DELIVERED (7/7 SP, 100%) - Iterators, NamespaceView, Cursor Guards complete.
- **ME-3 Status**: ðŸŸ  IN PROGRESS (5/18 SP, 28%) - ENG-20 (Meteor Aggregation) & ENG-21 (Section Emission) complete.
- **Current Test Count**: 312 total tests passing (100 lib + 203 integration + 9 doc tests)
- **Next Phase**: Continue ME-3 (ENG-22 through QA-10) - Export/import, scratch slots, constructor hardening.

Legends: Status â€” ðŸ”µ Ready, ðŸŸ  In Progress, âšª Planned. Owner marked when a driver is assigned.

---

## ðŸ§± ME-1 â€” WORKSPACE FOUNDATIONS (8 SP)

| Ticket | SP | Status | Owner | Dependencies | Acceptance Snapshot |
|--------|----|--------|-------|--------------|---------------------|
| ENG-01 | 3 | âœ… Complete | - | None | Workspace struct wired into `MeteorEngine`; ordering, caches, scratch buffers stored per `(ctx, ns)`. |
| ENG-02 | 2 | âœ… Complete | - | ENG-01 | All mutation paths trigger cache invalidation; tests cover success & error flows. |
| ENG-03 | 1 | âœ… Complete | - | ENG-01 | Debug-only workspace dump behind `cfg(debug_assertions)` with snapshot test. |
| REGR-03 | 2 | âœ… Complete | - | ENG-01 | Namespace depth guard respects profile overrides; regression suite green in strict + relaxed modes. |

**ENG-01 (3 SP)** âœ… **COMPLETED** (2025-10-03)
- âœ… Delivered `EngineWorkspace` owning ordering tables, query caches, scratch slots keyed by `(context, namespace)`.
- âœ… Integrated with `MeteorEngine` lifecycle (init, clone, reset) without leaking through public API.
- âœ… Added 12 unit tests for workspace creation, cache invalidation, and scratch-slot reservation.
- âœ… Implementation: `src/lib/types/meteor/workspace.rs` (202 LOC implementation + 206 LOC tests)
- âœ… Test results: All 176 tests passing (105 lib + 71 integration, 100% pass rate)
- âœ… **Fix**: Added `EngineWorkspace::clear()` to properly align workspace with `StorageData` during `clear_storage()` and `reset_all()` operations
- âœ… Added regression tests: `tests/test_workspace_storage_alignment.rs` (3 tests validating workspace-storage alignment)

**ENG-02 (2 SP)** âœ… **COMPLETED** (2025-10-03)
- âœ… Extended all mutation methods (`store_token`, `store_token_at`, `set`, `delete`) to update workspace key_order
- âœ… Implemented scope-aware invalidation (key/namespace/context/storage levels)
- âœ… **Fixed**: Added `invalidate_caches()` calls on all insert/update/delete paths to prevent stale query cache
- âœ… Added `workspace-instrumentation` feature flag with cache hit/miss tracking
- âœ… Instrumentation includes: `cache_hits`, `cache_misses`, `cache_hit_ratio()` per namespace
- âœ… Counters automatically reset on cache invalidation
- âœ… Test results: 24 tests (14 mutation + 10 cache invalidation), all passing
- âœ… **China's Review**: Production Ready - comprehensive mutation hooks, solid invalidation logic
- âœ… Files modified: `Cargo.toml`, `workspace.rs` (+70 LOC), `engine.rs` (4 invalidation calls added), test suite (+390 LOC)

**ENG-03 (1 SP)** âœ… **COMPLETED** (2025-10-03)
- âœ… `workspace_status()` method already implemented in ENG-01 (returns `WorkspaceStatus` struct)
- âœ… Added comprehensive documentation to `ENGINE_ENHANCEMENT.md` with:
  - Full `WorkspaceStatus` struct definition with field descriptions
  - Complete usage example with debug assertions and feature flag handling
  - 5 guard rails documented (debug-only, read-only, feature flags, atomic invalidation, encapsulation)
  - Cache invalidation semantics for all mutation paths
  - Performance monitoring instructions for ME-2 testing
- âœ… Documentation includes workspace inspection section (~80 lines) with guard rails and examples
- âœ… All 203 tests passing (no changes to implementation, documentation-only ticket)

**REGR-03 (2 SP)** âœ… **COMPLETED** (2025-10-03)
- âœ… Created comprehensive regression test suite: `tests/test_namespace_depth_regression.rs` (13 tests, 298 LOC)
- âœ… Profile-aware tests validate all 4 profiles: default, enterprise, embedded, strict
- âœ… Test coverage includes:
  - Clear/warning/error threshold validation
  - Progressive depth validation (1-10 levels)
  - Profile-specific boundary tests (cfg attributes)
  - Edge case testing (max_depth - 1)
  - Real-world namespace pattern validation
  - Integration with MeteorEngine
- âœ… Fixed cfg(meteor_default) warning by adding meteor_default to build.rs check-cfg declarations
- âœ… Created GitHub Actions CI workflow: `.github/workflows/profile-regression.yml`
  - Matrix testing across all 4 profiles
  - Automatic rebuild with METEOR_PROFILE env var
  - Profile configuration display for debugging
  - Lint/clippy checks on default profile
- âœ… Comprehensive testing guide: `docs/PROFILE_TESTING.md` (~300 lines)
  - Local testing instructions with examples
  - CI simulation scripts
  - Profile-aware test writing patterns
  - Troubleshooting guide
  - Best practices for downstream consumers
- âœ… All 13 regression tests pass in default profile
- âœ… Namespace depth validation respects compile-time profile overrides via NAMESPACE_ERROR_DEPTH/NAMESPACE_WARNING_DEPTH constants

---

## ðŸ”„ ME-2 â€” ITERATORS & CURSOR GUARDS (7 SP)

| Ticket | SP | Status | Owner | Dependencies | Acceptance Snapshot |
|--------|----|--------|-------|--------------|---------------------|
| ENG-10 | 2 | âœ… Complete | - | ME-1 | `iter_entries`, `contexts_iter`, `namespaces_iter` cover hybrid storage with ordering hints. |
| ENG-11 | 2 | âœ… Complete | - | ENG-10 | Namespace view struct exposes counts/default markers with ordered iteration methods. |
| ENG-12 | 3 | âœ… Complete | - | ENG-10 | `cursor()` accessor and `CursorGuard` RAII provide safe cursor state management with panic/error restoration. |

**ENG-10 (2 SP)** âœ… **COMPLETED** (2025-10-03)
- âœ… Implemented `contexts_iter()` - iterator over sorted context names
- âœ… Implemented `namespaces_iter(context)` - iterator over sorted namespace names within context
- âœ… Implemented `iter_entries()` - iterator over all entries with workspace ordering
  - Returns `EntriesIterator<'_>` yielding `(String, String, String, String)` tuples
  - Leverages workspace `key_order` for deterministic insertion-order iteration
  - Falls back to storage keys when workspace unavailable (hybrid storage support)
  - Explicit lifetime annotation (`'_`) for clear borrowing semantics
- âœ… Added 17 comprehensive unit tests (`tests/test_engine_iterators.rs`, 249 LOC):
  - Context/namespace iterator edge cases (empty, single, multiple)
  - Entry iteration across contexts/namespaces
  - Workspace ordering preservation (insertion order, NOT alphabetical)
  - Post-deletion consistency
  - Update ordering stability
- âœ… Added iteration instrumentation (feature-gated):
  - `iteration_count`, `keys_iterated` per namespace
  - `total_iterations`, `total_keys_iterated`, `avg_keys_per_iteration` in WorkspaceStatus
  - `record_iteration()`, `avg_keys_per_iteration()` methods
- âœ… Comprehensive documentation in `ENGINE_ENHANCEMENT.md` (~180 lines):
  - API surface with examples
  - Implementation details and algorithm
  - Workspace integration strategy
  - Performance characteristics (time/space complexity)
  - Lifetime and borrowing semantics
  - Test coverage summary
- âœ… All 252 tests passing (234 existing + 17 new + 1 doc test)
- âœ… **Bug Fix** (2025-10-03): Fixed instrumentation bug where `record_iteration()` was never called
  - Changed counters from `u64` to `Cell<u64>` for interior mutability
  - `EntriesIterator` now calls `workspace.record_iteration()` when using `key_order`
  - Implemented manual `Clone` for `NamespaceWorkspace` to handle `Cell` fields
  - Added 6 instrumentation tests (`tests/test_iteration_instrumentation.rs`)
  - Iteration metrics now persist across cache invalidations (lifetime statistics)

**ENG-11 (2 SP)** âœ… **COMPLETED** (2025-09-27)
- âœ… Implemented `namespace_view(context, namespace)` returning `Option<NamespaceView<'_>>`
- âœ… Created `NamespaceView` struct with public metadata:
  - `context: String` - context name
  - `namespace: String` - namespace path
  - `entry_count: usize` - total keys in namespace
  - `has_default: bool` - `.index` key detection for directory-style namespaces
- âœ… Implemented iterator methods (all with workspace ordering):
  - `entries()` - iterator over `(String, String)` key-value pairs
  - `keys()` - iterator over `&str` keys
  - `values()` - iterator over `String` values
- âœ… Implemented access methods:
  - `get(key)` - single key access without iteration
  - `has_key(key)` - key existence check
  - `find_keys(pattern)` - pattern matching with `*` wildcard
- âœ… Workspace integration: Uses `key_order` for insertion-order iteration, falls back to storage keys
- âœ… Lazy value access: Stores only keys, fetches values on-demand (memory efficient)
- âœ… Lifetime safety: Borrows engine immutably, multiple views can coexist
- âœ… Added 18 comprehensive unit tests (`tests/test_namespace_view.rs`, 372 LOC):
  - Metadata validation (context, namespace, entry_count, has_default)
  - Iterator correctness (entries, keys, values)
  - Access method validation (get, has_key, find_keys)
  - Edge cases (empty, nonexistent, multiple contexts)
  - Workspace ordering preservation (insertion order, NOT alphabetical)
  - Post-deletion consistency, update ordering stability
  - Bracket notation support, complex namespace paths
  - `.index` detection with multiple keys
- âœ… Comprehensive documentation added to `ENGINE_ENHANCEMENT.md` (~300 lines):
  - Complete API reference with examples
  - Implementation details (workspace ordering, lazy values, default detection)
  - Performance characteristics (time/space complexity)
  - Lifetime and borrowing semantics
  - Use cases (document export, namespace inspection, CLI enhancement)
  - Test coverage summary
- âœ… Exported `NamespaceView` from public API (`src/lib/types/meteor/mod.rs`)
- âœ… All 257 tests passing (239 existing + 18 new NamespaceView tests)
- âœ… Ready for CLI `list` command integration and document virtualization (DOC_VIRTUALIZATION_MODEL.md)
- âœ… **Cleanup**: Removed legacy `TokenBucket` code (262 LOC) to eliminate architectural confusion - MeteorEngine/StorageData is now the sole storage path

**ENG-12 (3 SP)** âœ… **COMPLETED** (2025-09-27)
- âœ… Implemented `cursor()` accessor method returning `Cursor<'_>`
- âœ… Created `Cursor` struct with context/namespace access and modification:
  - `context()` - read current context
  - `namespace()` - read current namespace
  - `set_context(impl Into<Context>)` - set context (accepts &str, String, Context)
  - `set_namespace(impl Into<Namespace>)` - set namespace (accepts &str, String, Namespace)
  - `reset()` - reset to defaults (app:main)
  - `position()` - formatted "context:namespace" string
- âœ… Implemented `cursor_guard()` method returning `CursorGuard` (RAII)
- âœ… Created `CursorGuard` with automatic cursor restoration:
  - Saves cursor state on creation
  - Restores state on drop (even on panic)
  - Works with early returns (`return`, `?`, `break`, `continue`)
  - Supports nested guards with correct restoration order
- âœ… Added `From<&str>` and `From<String>` implementations:
  - `Context::from(&str)` and `Context::from(String)` for ergonomic construction
  - `Namespace::from(&str)` and `Namespace::from(String)` for ergonomic construction
  - Enables `cursor.set_context("user")` without explicit type construction
- âœ… Added 18 comprehensive regression tests (`tests/test_cursor_guard.rs`, 307 LOC):
  - Cursor accessor tests (7 tests): basic operations, set_context/namespace, reset, position
  - Guard RAII tests (7 tests): basic restoration, nested guards, data operations, early return, panic safety, sequential guards, modified state preservation
  - Integration tests (4 tests): control commands, complex paths, combined cursor+guard usage, drop order verification
- âœ… Comprehensive documentation added to `ENGINE_ENHANCEMENT.md` (~260 lines):
  - Complete API reference with examples
  - Cursor and CursorGuard structure details
  - Flexible type conversion patterns (`Into<Context>`, `Into<Namespace>`)
  - Guard safety pattern and invariants (raw pointer usage, lifetime guarantees)
  - Performance characteristics (O(1) operations, memory usage)
  - Use cases (REPL commands, parser contexts, CLI display, panic-safe operations)
  - Test coverage summary
- âœ… Exported `Cursor` and `CursorGuard` from public API (`src/lib/types/meteor/mod.rs`)
- âœ… All 279 tests passing (257 existing + 18 new cursor tests + 4 new From<&str> conversions)
- âœ… ME-2 phase complete: 7/7 SP (100%) - All iterator and cursor guard infrastructure delivered
- âœ… Ready for CLI/REPL integration (REPL scratch commands, CLI status display, parser cursor guards)

---

## ðŸŒ  ME-3 â€” METEOR AGGREGATION & VIRTUALIZATION (18 SP)

| Ticket | SP | Status | Owner | Dependencies | Acceptance Snapshot |
|--------|----|--------|-------|--------------|---------------------|
| ENG-20 | 3 | âœ… Complete | - | ME-2 | `meteors()` / `meteor_for()` produce grouped meteor views consumed by CLI/REPL. |
| ENG-21 | 2 | âœ… Complete | - | ENG-20 | Section/part emission honours ordering metadata; golden tests updated. |
| ENG-22 | 2 | âšª Planned | TBA | ENG-20 | `export_namespace` supports text+JSON, captures metadata checksum. |
| ENG-23 | 2 | âšª Planned | TBA | ENG-22 | `import_namespace` validates metadata, enforces invariant, reports diff. |
| ENG-24 | 2 | âšª Planned | TBA | ENG-20 | `scratch_slot` API isolates workspace scratch areas with lifetime guard. |
| ENG-40 | 3 | âšª Planned | TBA | ENG-20 | Meteor constructors enforce single `(context, namespace)`; legacy shims guarded. |
| ENG-41 | 2 | âšª Planned | TBA | ENG-20 | Parsers align with grouped meteors; compatibility flag retains substring find. |
| ENG-42 | 1 | âšª Planned | TBA | ME-2 | Central smart-split shared by parsers/CLI; regression covers quoting edge cases. |
| CLI-05 | 1 | âšª Planned | TBA | ENG-20, ENG-22 | CLI `parse` routed through meteor views with text/json parity tests. |
| REPL-05 | 1 | âšª Planned | TBA | ENG-20, ENG-24 | REPL `meteor/list/history` commands use new APIs; scripted test added. |
| QA-10  | 1 | âšª Planned | TBA | ME-3 | Zero-warning baseline kept; CI guard fails on new warnings. |

**ENG-20 (3 SP)** âœ… **COMPLETED** (2025-09-27)
- âœ… Implemented `meteors()` iterator method returning `MeteorsIterator<'_>`
- âœ… Implemented `meteor_for(context, namespace)` accessor returning `Option<Meteor>`
- âœ… Created `MeteorsIterator<'a>` struct with lazy meteor construction:
  - Iterates contexts (sorted alphabetically)
  - Iterates namespaces within each context (sorted alphabetically)
  - Builds `Meteor` instances with tokens on-demand
  - Preserves workspace insertion order through `key_order` integration
  - Hybrid storage fallback when workspace unavailable
- âœ… Algorithm: O(total keys + C log C + N log N) where C=contexts, N=namespaces
- âœ… Integration with ME-2 infrastructure:
  - Uses `namespace_view()` from ENG-11 for ordered access
  - Leverages workspace `key_order` for deterministic iteration
  - Consistent ordering with `EntriesIterator` and `NamespaceView`
- âœ… Added 19 comprehensive integration tests (`tests/test_meteor_aggregation.rs`, 282 LOC):
  - `meteor_for()` tests (10 tests): basic, nonexistent, empty, workspace ordering, bracket keys, `.index` keys, token values
  - `meteors()` tests (9 tests): empty, single/multiple namespaces, multiple contexts, ordering preservation, deletions, updates, sorted contexts, consistency checks, multiple iterations
- âœ… Comprehensive documentation added to `ENGINE_ENHANCEMENT.md` (~250 lines):
  - Complete API reference with examples
  - MeteorsIterator structure and algorithm details
  - Integration strategy with ME-2 infrastructure
  - Performance characteristics (time/space complexity)
  - Use cases (CLI parse, REPL meteor command, export/import, view composition)
  - Test coverage summary
- âœ… Exported `MeteorsIterator` from public API (`src/lib/types/meteor/mod.rs`)
- âœ… All 309 tests passing (288 existing + 19 new meteor aggregation + 2 doc tests)
- âœ… Ready for CLI-05 (parse command) and REPL-05 (meteor/list commands) integration

**ENG-21 (2 SP)** âœ… **COMPLETED** (2025-09-27)
- âœ… Modified `Meteor::Display` trait to use `key_notation()` instead of `key().to_string()`:
  - **Before**: `token.key().to_string()` outputs transformed notation: `sections__i_intro`
  - **After**: `token.key_notation()` outputs original bracket notation: `sections[intro]`
- âœ… Workspace ordering preservation through token Vec:
  - `meteor_for()` uses `namespace_view().entries()` (ENG-11)
  - `entries()` leverages workspace `key_order` for insertion-order iteration (ENG-10)
  - Token Vec built in workspace order
  - Display serializes tokens in Vec order (preserves insertion order)
- âœ… Human-readable output for document/script virtualization:
  - Document sections: `doc:guides.install:sections[intro]=Welcome;sections[10_setup]=Step 1`
  - Shell script parts: `shell:setup.env:parts[env_check]=...;parts[install_pkg]=...`
  - Round-trip fidelity: `Meteor::parse(meteor.to_string())` preserves original keys
- âœ… Added 3 comprehensive tests (`tests/test_meteor_aggregation.rs`, +63 LOC):
  - `test_meteor_display_preserves_workspace_ordering` - Doc sections with insertion order
  - `test_shell_parts_display_preserves_ordering` - Shell script parts ordering
  - `test_meteors_iterator_display_with_sections` - Iterator display consistency
- âœ… Comprehensive documentation added to `ENGINE_ENHANCEMENT.md` (~160 lines):
  - Display trait changes with before/after examples
  - Ordering preservation mechanism
  - Document/script virtualization use cases
  - Integration with ENG-22/ENG-23 (export/import)
  - Benefits: human-readable output, filesystem export, round-trip fidelity
- âœ… All 22 tests passing in test_meteor_aggregation.rs (19 ENG-20 + 3 ENG-21)
- âœ… Total test count: 312 tests (309 existing + 3 new)
- âœ… Ready for ENG-22 (export_namespace) and ENG-23 (import_namespace) implementation

**ENG-22 (2 SP)** & **ENG-23 (2 SP)**
- Build export/import helpers with configurable format adapters, metadata manifests, and validation errors.
- Add sample fixtures (text + JSON) and round-trip integration tests.

**ENG-24 (2 SP)**
- Implement workspace-backed scratch slots with lifetime-managed handles; wire into REPL scratch workflow plan.

**ENG-40 (3 SP)**
- Harden meteor constructors, update `Meteor` docs, include migration notes for legacy multi-context meteors.

**ENG-41 (2 SP)**
- Align parser flows with aggregated meteor surfaces; toggle legacy substring search via config.

**ENG-42 (1 SP)**
- Centralize smart-split logic; add regression coverage for escaped quotes and ctl tokens.

**CLI-05 (1 SP)** & **REPL-05 (1 SP)**
- Move CLI/REPL rendering onto meteor views; verify parity with legacy logs via smoke tests.

**QA-10 (1 SP)**
- Ensure compilation warnings remain zero; extend CI script to fail on warning introduction.

---

## ðŸ“Œ TRACKERS & FOLLOW-UPS
- **Testing Expansion**: TEST-01..03, REGR-01 scheduled once ME-3 APIs stabilize.
- **Documentation**: ENG-90..92 queued post ME-3 for architecture and workflow updates.
- **Integration**: ProntoDB contract review after aggregated APIs land.

Last Updated: 2025-09-27
