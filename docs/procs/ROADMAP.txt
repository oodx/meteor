================================================================================
 🗺️ METEOR ENGINE ROADMAP
================================================================================

🎯 Vision: Deliver a stateful MeteorEngine with first-class iteration, aggregation,
          and virtualization APIs that unblock CLI/REPL parity and ProntoDB streams.
📅 Horizon: Milestones cover the next three delivery cycles (≈6–8 weeks total).
🚀 Priority: ME-1 ✅ → ME-2 ✅ → ME-3 ✅ → ME-4 (parsing/query polish in planning).

================================================================================
 📆 MILESTONE OVERVIEW
================================================================================

| Milestone | Target Window  | Scope Summary                                         | Exit Criteria | Status |
|-----------|----------------|-------------------------------------------------------|---------------|--------|
| ME-1      | Week 1–2       | Engine workspace foundations + cache invalidation     | Workspace behind API, mutation hooks gated, debug dump ready | ✅ Delivered |
| ME-2      | Week 3–4       | Iterator surfaces, namespace views, cursor guards     | CLI/REPL ready helpers, cursor guard restores on error        | ✅ Delivered |
| ME-3      | Week 5–6       | Meteor aggregation/export/import + parser alignment   | CLI/REPL powered by meteor views, export/import round trips   | ✅ Delivered |
| ME-4      | Week 7–8       | Parsing & query polish + strict validation hooks      | Structured path errors, glob-aware queries, unified split, strict setters | 🔵 Ready |

Total Planned Capacity: 43 SP (ME-1: 8 SP ✅, ME-2: 7 SP ✅, ME-3: 18 SP ✅, ME-4: 10 SP 🔵).

================================================================================
 🧱 ME-1 — Workspace Foundations (Phase 0)
================================================================================

**Status**: ✅ Completed (8/8 SP)
**Goal**: Introduce the internal `EngineWorkspace` layer and supporting safeguards so
future features can rely on ordering metadata, caches, and scratch buffers without
leaking concerns into `StorageData`.

| Ticket | SP | Status | Summary |
|--------|----|--------|---------|
| ENG-01 | 3  | ✅ Done | EngineWorkspace implemented (ordering tables, caches, scratch buffers) with lifecycle integration + tests. |
| ENG-02 | 2  | ✅ Done | Mutation hooks + scope-aware cache invalidation + instrumentation feature flag. |
| ENG-03 | 1  | ✅ Done | Debug-only workspace inspection + documentation guard rails. |
| REGR-03 | 2 | ✅ Done | Namespace depth regression guard + profile-aware CI + testing guide. |

**Acceptance Achieved**:
- Workspace access stays internal; mutation hooks keep caches coherent.
- Debug builds expose `workspace_status()` behind guard; namespace depth tests pass in all profiles.
- 203 tests passing at phase completion (lib + integration).

================================================================================
 🔄 ME-2 — Iterators & Cursor Guards (Phase 1)
================================================================================

**Status**: ✅ Completed (7/7 SP)
**Goal**: Replace direct `StorageData` probing with iterator/view APIs and provide
cursor lifetime guards that make REPL/CLI cursor handling safe by default.

| Ticket | SP | Status | Summary |
|--------|----|--------|---------|
| ENG-10 | 2 | ✅ Done | `contexts_iter`, `namespaces_iter`, `iter_entries` with workspace ordering + instrumentation. |
| ENG-11 | 2 | ✅ Done | `NamespaceView` with metadata, ordered iteration, access helpers. |
| ENG-12 | 3 | ✅ Done | `Cursor` accessor + `CursorGuard` RAII, parser-friendly context switching. |

**Acceptance Achieved**:
- Iterators cover hybrid storage; workspace ordering preserved; instrumentation optional.
- Namespace views feed future CLI formatting; lazy value access keeps memory overhead low.
- Cursor guard restores on early returns/panics; nested guard behavior verified by 18 tests.
- 288 tests passing at phase completion (100 lib + 179 integration + 9 doc).

================================================================================
 🌠 ME-3 — Meteor Aggregation & Virtualization Hooks (Phase 2)
================================================================================

**Status**: 🔵 Ready (18 SP)
**Goal**: Provide aggregated meteor views grouped by `(context, namespace)` and hook
up export/import capabilities in preparation for document virtualization.

| Ticket | SP | Status | Summary |
|--------|----|--------|---------|
| ENG-20 | 3 | ✅ Delivered | Expose `meteors()` / `meteor_for()` grouped views feeding CLI/REPL outputs. |
| ENG-21 | 2 | ✅ Delivered | Honor ordering metadata when emitting sections/parts/snippets. |
| ENG-22 | 2 | ✅ Delivered | Implement `export_namespace` helper supporting multiple formats. |
| ENG-23 | 2 | ✅ Delivered | Implement `import_namespace` with metadata capture & validation. |
| ENG-24 | 2 | ✅ Delivered | Provide workspace-backed scratch slots (`scratch_slot`) for REPL workflows. |
| ENG-40 | 3 | ✅ Delivered | Enforce meteor invariant (single context/namespace) and update constructors. |
| ENG-41 | 2 | ✅ Delivered | Align parsers with grouped meteors and mixed-address policy toggles. |
| CLI-05 | 1 | ✅ Delivered | Route CLI `parse` output through meteor views (text/json parity). |
| REPL-05 | 1 | ✅ Delivered | Update REPL `meteor`, `list`, `history` commands to new APIs. |
| ENG-42 | 1 | ✅ Delivered | Centralize semicolon smart-split logic; regression tests for quoted literals. |
| QA-10  | 1 | ✅ Delivered | Maintain zero-warning baseline post-refactor. |

**Dependencies**: ME-2 iterators/guards.
**Acceptance Focus**:
- Aggregation APIs feed CLI/REPL without direct `StorageData` access.
- Export/import helpers round-trip fixtures, capture metadata.
- Parser alignment retains legacy substring find via compatibility flag until glob search lands.
- Scratch slots isolated from canonical storage; debug dumps illustrate workspace usage.

================================================================================
 🔗 CROSS-CUTTING TRACKERS
================================================================================

- **Testing**: Phase 6 tickets (TEST-01..03, REGR-01) scheduled once ME-3 stabilizes API surface.
- **Documentation**: ENG-90..92 queued post ME-3 for architecture + workflow refresh.
- **Integration**: ProntoDB contract review after aggregated APIs land (post ENG-23/ENG-24).

================================================================================
 ✅ SUCCESS METRICS
================================================================================

- Every milestone exits with `cargo test` + targeted CLI/REPL smoke suites passing.
- No public API regressions (guarded by REGR-03, ENG-42, QA-10).
- CLI/REPL latency within ±5% of pre-workspace benchmarks once ME-3 lands.
- Workspace debug tooling available for diagnostics without impacting release builds.

Last Updated: 2025-10-05 (ME-1..ME-3 delivered; ME-4 queued)
Next Review: Kickoff ME-4 once CLI/REPL teams confirm readiness for parser/path updates.
================================================================================
