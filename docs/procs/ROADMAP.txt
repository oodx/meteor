================================================================================
 üó∫Ô∏è METEOR ENGINE ROADMAP
================================================================================

üéØ Vision: Deliver a stateful MeteorEngine with first-class iteration, aggregation,
          and virtualization APIs that unblock CLI/REPL parity and ProntoDB streams.
üìÖ Horizon: Milestones cover the next three delivery cycles (‚âà6‚Äì8 weeks total).
üöÄ Priority: Stand up the workspace layer, surface iterator/guard APIs, then
             ship meteor aggregation/export tooling.

================================================================================
 üìÜ MILESTONE OVERVIEW
================================================================================

| Milestone | Target Window  | Scope Summary                                         | Exit Criteria |
|-----------|----------------|-------------------------------------------------------|---------------|
| ME-1      | Week 1‚Äì2       | Engine workspace foundations + cache invalidation     | Workspace behind API, mutation hooks gated, debug dump ready |
| ME-2      | Week 3‚Äì4       | Iterator surfaces, namespace views, cursor guards     | CLI smoke tests on iterators, cursor guard restores on error |
| ME-3      | Week 5‚Äì6       | Meteor aggregation/export/import + parser alignment   | CLI/REPL powered by meteor views, export/import round trips |

Total Planned Capacity: 33 SP (ME-1: 8 SP, ME-2: 7 SP, ME-3: 18 SP)

================================================================================
 üß± ME-1 ‚Äî Workspace Foundations (Phase 0)
================================================================================

**Goal**: Introduce the internal `EngineWorkspace` layer and supporting safeguards so
future features can rely on ordering metadata, caches, and scratch buffers without
leaking concerns into `StorageData`.

| Ticket | SP | Status | Summary |
|--------|----|--------|---------|
| ENG-01 | 3  | üîµ Ready | Implement `EngineWorkspace` (ordering tables, query caches, scratch buffers) anchored to `StorageData` invariants. |
| ENG-02 | 2  | Planned | Add atomic mutation hooks on `set/delete/reset` to invalidate workspace caches consistently. |
| ENG-03 | 1  | Planned | Expose debug-only workspace inspection via `cfg(debug_assertions)` toggle. |
| REGR-03 | 2 | Planned | Align namespace depth regression guard with configuration profiles. |

**Dependencies**: None.
**Acceptance**:
- Workspace internal-only with accessor shims for future phases.
- Cache invalidation triggered on every mutation path.
- Debug builds can dump workspace state without affecting release binaries.
- Namespace depth regression harness passes on all profiles.

================================================================================
 üîÑ ME-2 ‚Äî Iterators & Cursor Guards (Phase 1)
================================================================================

**Goal**: Replace direct `StorageData` probing with iterator/view APIs and provide
cursor lifetime guards that make REPL/CLI cursor handling safe by default.

| Ticket | SP | Status | Summary |
|--------|----|--------|---------|
| ENG-10 | 2 | Planned | Surface `iter_entries`, `contexts_iter`, `namespaces_iter` backed by workspace ordering hints. |
| ENG-11 | 2 | Planned | Deliver ordered namespace views with metadata (counts, default markers, ordering hints). |
| ENG-12 | 3 | Planned | Add `CursorGuard` / `with_cursor` helpers plus `engine.cursor()` accessor struct. |

**Dependencies**: ME-1 workspace infrastructure.
**Acceptance**:
- Iterators cover hybrid storage (flat + tree) including empty namespaces.
- Cursor guard automatically restores prior state on early returns/errors.
- CLI smoke tests for `parse`, `list`, `contexts`, `namespaces` exercise new iterators.

================================================================================
 üå† ME-3 ‚Äî Meteor Aggregation & Virtualization Hooks (Phase 2)
================================================================================

**Goal**: Provide aggregated meteor views grouped by `(context, namespace)` and hook
up export/import capabilities in preparation for document virtualization.

| Ticket | SP | Status | Summary |
|--------|----|--------|---------|
| ENG-20 | 3 | Planned | Expose `meteors()` / `meteor_for()` grouped views feeding CLI/REPL outputs. |
| ENG-21 | 2 | Planned | Honor ordering metadata when emitting sections/parts/snippets. |
| ENG-22 | 2 | Planned | Implement `export_namespace` helper supporting multiple formats. |
| ENG-23 | 2 | Planned | Implement `import_namespace` with metadata capture & validation. |
| ENG-24 | 2 | Planned | Provide workspace-backed scratch slots (`scratch_slot`) for REPL workflows. |
| ENG-40 | 3 | Planned | Enforce meteor invariant (single context/namespace) and update constructors. |
| ENG-41 | 2 | Planned | Align parsers with grouped meteors and mixed-address policy toggles. |
| CLI-05 | 1 | Planned | Route CLI `parse` output through meteor views (text/json parity). |
| REPL-05 | 1 | Planned | Update REPL `meteor`, `list`, `history` commands to new APIs. |
| ENG-42 | 1 | Planned | Centralize semicolon smart-split logic; add regression tests for quoted literals. |
| QA-10  | 1 | Planned | Maintain zero-warning baseline post-refactor. |

**Dependencies**: ME-2 iterators/guards.
**Acceptance**:
- CLI/REPL command set consumes aggregated meteor APIs without direct `StorageData` access.
- Export/import helpers round-trip sample fixtures and capture metadata.
- Parser alignment retains legacy substring find behavior under compatibility flag until glob search lands.
- Scratch slots isolated from canonical storage; debug dumps illustrate workspace usage.

================================================================================
 üîó CROSS-CUTTING TRACKERS
================================================================================

- **Testing**: Phase 6 tickets (TEST-01..03, REGR-01) scheduled once ME-3 stabilizes.
- **Documentation**: ENG-90..92 will refresh architecture references post ME-3.
- **Integration**: ProntoDB stream adapter re-evaluates after ME-3 completion.

================================================================================
 ‚úÖ SUCCESS METRICS
================================================================================

- Every milestone exits with cargo tests + targeted CLI smoke suites passing.
- No public API regressions (tracked via REGR-03, ENG-42, QA-10).
- CLI/REPL latency within ¬±5% of pre-workspace benchmarks once ME-3 lands.
- Workspace debug tooling available for diagnostics without enabling in release builds.

Last Updated: 2025-10-03
Next Review: Post ME-1 completion or earlier if scope shifts.
================================================================================
