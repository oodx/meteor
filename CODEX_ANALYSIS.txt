Hybrid Storage Review Findings
==============================

Blocking Issues
---------------

1. Meteor path parsing still assumes "context:key" format for two-part paths.
   - Evidence: `parse_meteor_path` treats any two-component path as `(context, "main", key)` (`src/lib/types/meteor/engine.rs:355-362`).
   - Impact: Directory queries like `engine.is_directory("user:settings")` are routed to the `main` namespace, so the tree lookup misses the `settings` namespace entirely and returns `false`, matching the failing test output.
   - Fix: Update the parser so that `"context:namespace"` resolves to `(context, namespace, "")`. Only treat the second segment as a key when a real namespace is intentionally omitted (e.g., require an explicit placeholder such as `context::key`).

2. Single-segment paths default to the wrong context and cannot express directory roots.
   - Evidence: The same parser hard-codes `(app, main, <segment>)` for one-part inputs (`src/lib/types/meteor/engine.rs:355-357`).
   - Impact: Calls like `engine.has_default("user")` look under the `app` context instead of `user`, so directory default lookups can never succeed even after writing `engine.set("user:index", ..)` (`tests/test_engine_hybrid.rs:23-28`).
   - Fix: Treat a single identifier as a context-level directory (`(segment, "main", "")`) so that the `.index` helper in `ContextStorage::has_default` (`src/lib/types/meteor/storage_data.rs:108-117`) sees the expected canonical key.

Secondary Observations
----------------------

- The hybrid tree indexing in `StorageData` correctly builds namespace roots (`StorageData::set` → `ContextStorage::update_tree_index`), so once the parser delivers the right namespace/path tuple the directory checks should pass without further changes.

ENGINE Tasks
------------

- ENGINE-01: Adjust `parse_meteor_path` to return `(context, namespace, "")` for two-part inputs and `(context, "main", "")` for single-part inputs, preserving the explicit empty-namespace form via `context::key` (`src/lib/types/meteor/engine.rs`).
- ENGINE-02: Add regression coverage that exercises `is_directory("context:namespace")`, `has_default("context")`, and the `context::key` empty-namespace case to guard the parser semantics (`tests/test_engine_hybrid.rs` or a dedicated unit test module).
- ENGINE-03: Audit documentation and examples for dot-delimited meteor paths and align them with the colon-based addressing now enforced by the parser (`docs/README.md`, `docs/ref/architecture/HYBRID_STORAGE_ARCHITECTURE.md`, and related guides).

Testing Infrastructure Findings
===============================

1. `bin/test.sh` advertises RSB flags that are never consumed.
   - Evidence: Flags like `--comprehensive`, `--benchmark`, and `--sleep` toggle shell variables that are never read afterwards (`bin/test.sh:19-71`), so they silently do nothing.
   - Impact: Developers believe different suites or pacing modes exist, but every invocation ultimately calls the same `cargo test` commands.

2. The test matrix points at files that do not exist.
   - Evidence: Entries such as `validation → validation.rs` and `all → all.sh` lack corresponding files under `tests/` (`bin/test.sh:37-56` vs. `tests/validation/`, `tests/all.sh`). The runner exits with "Test file not found" when those targets are requested.
   - Impact: The documented RSB categories (validation, comprehensive, integration, performance) are dead links, preventing those suites from ever being exercised.

3. Integration tests are wrapped in `#[cfg(test)] mod tests` blocks, so the harness executes zero assertions.
   - Evidence: Files like `tests/sanity.rs` and `tests/uat.rs` gate all tests behind `#[cfg(test)]`, but integration crates are built without that configuration flag; invoking `cargo test --test sanity` reports `running 0 tests` (see `tests/sanity.rs:15-118`).
   - Impact: The majority of our sanity/UAT suites never run, masking numerous regressions (for example, these files still assert dot-based paths such as `engine.get("app.main.host")`).

4. Support scripts in `tests/sanity/` invoke non-existent binaries.
   - Evidence: `tests/sanity/run.sh` calls `cargo test --test sanity_meteor`, `sanity_rsb_fs`, etc. (`tests/sanity/run.sh:19-102`), but no such integration test crates exist.
   - Impact: Anyone using the helper script encounters immediate failures, and the automation pipeline cannot rely on it.

5. New hybrid storage coverage is not wired into the official runner.
   - Evidence: `tests/test_engine_hybrid.rs` holds the failing hybrid directory assertion, but `bin/test.sh` never invokes it, so the unified interface misses the regression entirely.

TEST Tasks
----------

- TEST-01: Rework the integration test layout so tests are defined at crate root (no `#[cfg(test)]` gating) and update expectations to the colon-based API (`tests/sanity.rs`, `tests/uat.rs`, and derivative modules).
- TEST-02: Bring `bin/test.sh` and `tests/sanity/run.sh` in sync with reality—remove unused flag plumbing, prune or implement missing suites, and ensure each advertised alias maps to an actual `cargo test` target (`bin/test.sh`, `tests/sanity/run.sh`).
- TEST-03: Expose the hybrid storage regression suite through the primary runner (e.g., add a `hybrid` target that runs `cargo test --test test_engine_hybrid`) so the failing directory behavior is visible in CI (`bin/test.sh`, `tests/test_engine_hybrid.rs`).
- TEST-04: Foundation suite remains red—`cargo test --test foundation` fails on `parser_validation_integration_tests::test_quoted_values_in_streams` (`tests/foundation.rs:420`). Do not advertise a `foundation` target until the underlying parser defect is fixed or quarantined.

Regression Review (Claude Patch)
================================

1. Single-segment paths now misroute to a synthetic context.
   - Evidence: `parse_meteor_path` maps `"button"` → `(button, "main", "")` in the updated implementation (`src/lib/types/meteor/engine.rs:354-368`).
   - Impact: Established shorthand like `engine.get("button")` or `engine.set("button", ...)` no longer hits `app:main:button`; it reads/writes an empty key under a new `button` context, breaking existing consumers.
   - Suggested Fix: Preserve backward compatibility by keeping single-part paths anchored to the current context (default `app`) and main namespace. Introduce a dedicated API if context-switch shorthand is required.

2. Empty-namespace lookups treated as file keys instead of directories.
   - Evidence: `parse_meteor_path_for_directory` converts `"app::folder"` into `(app, "", "folder")` (`src/lib/types/meteor/engine.rs:396-404`), so subsequent directory checks look for a file named `folder` under empty namespace rather than the namespace root.
   - Impact: `engine.is_directory("app::settings")` reports `false` even when `app:settings:*` exists, and `.index` defaults on the empty namespace become unreachable.
   - Suggested Fix: When the second segment is empty, keep the namespace empty and the key empty; treat everything after the double colon as part of the namespace path.

3. Compiled binaries accidentally committed to the repository.
   - Evidence: `debug_path_parsing` and `test_regression` are 6MB ELF executables in the project root (e.g., `debug_path_parsing` reports "ELF 64-bit LSB pie executable" via `file`).
   - Impact: These artifacts bloat the repository, violate the cargo workflow, and will churn on every rebuild. They should be removed and ignored.

Regression Tasks
----------------

- REGRESSION-01: Restore single-identifier paths to resolve as `(current_context_or_app, "main", key)` so legacy shorthand continues to work (`src/lib/types/meteor/engine.rs`).
- REGRESSION-02: Update `parse_meteor_path_for_directory` to preserve empty namespaces and split keys correctly for double-colon inputs, then extend tests covering `engine.is_directory("app::foo")` and `.has_default("app::")` (`src/lib/types/meteor/engine.rs`, `tests/test_engine_hybrid.rs`).
- REGRESSION-03: Delete the committed binaries (`debug_path_parsing`, `test_regression`), add them to `.gitignore`, and regenerate the branch without compiled artifacts.

Testing Reference
-----------------

- `cargo test test_meteor_engine_hybrid_storage_methods` currently fails at `tests/test_engine_hybrid.rs:18` because `engine.is_directory("user:settings")` is routed to the wrong namespace.
- `cargo test --test sanity` fails to compile due to missing `parse_meteor_path_for_directory` helper, underscoring that the advertised sanity suite is neither build- nor run-ready.
- After Claude's patch, `cargo test test_meteor_engine_hybrid_storage_methods` passes, but the regressions listed above surface through existing shorthand callers.
- `cargo test --test foundation` is still red (1 failing test), so the newly advertised `test.sh foundation` target is not operational.
