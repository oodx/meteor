=== Codex Warmup Notes (Meteor Engine) ===

Purpose: fast bootstrapping reference when returning with zero context.

Project Status (2025-10-05)
- ME-1 (workspace foundations), ME-2 (iterators / namespace view / cursor guard), and ME-3 (meteor aggregation + export/import) are delivered.
- ME-4 (parsing & query polish, 10 SP) is next up: path parser errors, glob-aware queries, smart-split cleanup, strict setter options.
- Current test suite: 365 tests green (100 lib + 256 integration + 9 doc). `workspace-instrumentation` feature continues to gate cache metrics tests.

Key Documents / Read Order
1. docs/procs/ROADMAP.txt — milestone overview (updated after ME-2).
2. docs/procs/TASKS.txt — detailed task board with acceptance notes and ticket status.
3. docs/ref/architecture/ENGINE_ENHANCEMENT.md — spec for iterators, namespace view, cursor guard, ME-3 aggregation/export/import, and CLI output contract.
4. docs/PROFILE_TESTING.md — instructions for profile-aware regression testing (namespace depth).
5. DOC_VIRTUALIZATION_MODEL.md (in docs/ref/architecture) — background for ME-3 virtualization hooks.

Important Code Entry Points
- Engine core: src/lib/types/meteor/engine.rs (workspace integration, iterators, namespace view, cursor accessor/guard).
- Workspace internals: src/lib/types/meteor/workspace.rs (ordering, cache, scratch slots, instrumentation via feature flag).
- Namespace view tests: tests/test_namespace_view.rs.
- Cursor guard tests: tests/test_cursor_guard.rs.
- Iterators & instrumentation tests: tests/test_engine_iterators.rs, tests/test_iteration_instrumentation.rs (requires `--features workspace-instrumentation`).

Tooling / Commands
- Default test run: `cargo test` (respects METEOR_PROFILE from meteor.toml or env).
- Profile matrix (CI parity): `METEOR_PROFILE=<default|enterprise|embedded|strict> cargo test`.
- Instrumentation tests: `cargo test --features workspace-instrumentation`.
- Lint on default profile: `cargo fmt -- --check` and `cargo clippy -- -D warnings`.

Recently Completed Highlights
- Meteor aggregation APIs (`meteors()`, `meteor_for()`) now feed CLI/REPL/export with workspace ordering baked in.
- Export/import helpers land with checksum metadata and bracket-notation preservation; scratch-slot API powers REPL mem commands.
- CLI/REPL parse flows emit shared text/JSON formats via `serde_json`; hardened `Meteor::try_new*` constructors enforce single `(context, namespace)`.

Next Steps (ME-4 Prep Checklist)
1. ENG-30: Centralise meteor path parsing into `meteor::path` with structured errors the CLI/REPL can display.
2. ENG-31: Replace substring search with workspace-backed glob/prefix query helpers; keep a compatibility flag until consumers migrate.
3. ENG-32: Finish smart-split consolidation—retire remaining hand-rolled splitting logic and update regression tests.
4. ENG-33: Introduce `EngineSetOptions` so setters can opt into strict validation (namespace depth, reserved tokens, etc.).
5. Coordinate with CLI/REPL to adopt new error surfaces once ENG-30/31 land; schedule TEST-01..03 + REGR-01 afterwards.

Patterns / Guard Rails
- Use workspace ordering (`key_order`) whenever exposing iteration to user-facing APIs.
- Cache invalidation hooks already cover set/delete/reset; ensure new APIs invalidate appropriately.
- Cursor changes should go through `Cursor` or `CursorGuard` to avoid missing restoration.
- Keep instrumentation behind `workspace-instrumentation` feature; default build should have zero overhead.
- Tests should cover all four METEOR_PROFILE variants when behavior depends on namespace depth.

Verification Notes
- Default smoke: `cargo test` (optionally `--features workspace-instrumentation` for cache metrics).
- Profiles: `METEOR_PROFILE=<default|enterprise|embedded|strict> cargo test` per regression guard.
- For upcoming ME-4 parser changes, plan targeted fixtures under `tests/test_parser_alignment_eng41.rs` and ensure CLI parity suite stays green (`--test test_cli_output_parity_eng42`).
