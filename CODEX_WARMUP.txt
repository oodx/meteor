=== Codex Warmup Notes (Meteor Engine) ===

Purpose: fast bootstrapping reference when returning with zero context.

Project Status (2025-10-03)
- ME-1 (workspace foundations) and ME-2 (iterators, namespace view, cursor guard) are complete.
- ME-3 (meteor aggregation & virtualization, 18 SP) is the next active milestone. No implementation started yet.
- Current test suite: 288 tests passing (100 lib + 179 integration + 9 doc). Feature flag `workspace-instrumentation` adds extra instrumentation tests.

Key Documents / Read Order
1. docs/procs/ROADMAP.txt — milestone overview (updated after ME-2).
2. docs/procs/TASKS.txt — detailed task board with acceptance notes and ticket status.
3. docs/ref/architecture/ENGINE_ENHANCEMENT.md — spec for iterators, namespace view, cursor guard, and upcoming ME-3 APIs (meteors(), export/import, etc.).
4. docs/PROFILE_TESTING.md — instructions for profile-aware regression testing (namespace depth).
5. DOC_VIRTUALIZATION_MODEL.md (in docs/ref/architecture) — background for ME-3 virtualization hooks.

Important Code Entry Points
- Engine core: src/lib/types/meteor/engine.rs (workspace integration, iterators, namespace view, cursor accessor/guard).
- Workspace internals: src/lib/types/meteor/workspace.rs (ordering, cache, scratch slots, instrumentation via feature flag).
- Namespace view tests: tests/test_namespace_view.rs.
- Cursor guard tests: tests/test_cursor_guard.rs.
- Iterators & instrumentation tests: tests/test_engine_iterators.rs, tests/test_iteration_instrumentation.rs (requires `--features workspace-instrumentation`).

Tooling / Commands
- Default test run: `cargo test` (respects METEOR_PROFILE from meteor.toml or env).
- Profile matrix (CI parity): `METEOR_PROFILE=<default|enterprise|embedded|strict> cargo test`.
- Instrumentation tests: `cargo test --features workspace-instrumentation`.
- Lint on default profile: `cargo fmt -- --check` and `cargo clippy -- -D warnings`.

Recently Completed Highlights
- TokenBucket fully removed; MeteorEngine + StorageData is the sole storage path.
- NamespaceView provides ordered iteration + metadata; CursorGuard handles panic-safe cursor restoration.

Next Steps (ME-3 Kickoff Checklist)
1. ENG-20: Implement `meteors()` / `meteor_for()` returning grouped meteor views (context+namespace) backed by workspace ordering.
2. ENG-21: Ensure emitted sections/parts honor ordering metadata (ties into NamespaceView + workspace ordering).
3. ENG-22/ENG-23: Build export/import helpers with metadata manifests and round-trip tests.
4. ENG-24: Introduce workspace-backed scratch slots (REPL integration target).
5. ENG-40/ENG-41: Enforce meteor invariant + align parsers with grouped meteors (may require updates in parsers/token_stream.rs and meteor_stream.rs).
6. CLI-05 / REPL-05: After views exist, reroute CLI/REPL to new APIs; plan smoke tests.
7. ENG-42: Centralize smart-split (keep regression coverage for quoting literals).
8. QA-10: Maintain zero-warning baseline; ensure new warnings fail CI.

Patterns / Guard Rails
- Use workspace ordering (`key_order`) whenever exposing iteration to user-facing APIs.
- Cache invalidation hooks already cover set/delete/reset; ensure new APIs invalidate appropriately.
- Cursor changes should go through `Cursor` or `CursorGuard` to avoid missing restoration.
- Keep instrumentation behind `workspace-instrumentation` feature; default build should have zero overhead.
- Tests should cover all four METEOR_PROFILE variants when behavior depends on namespace depth.

Verification Notes
- Before merging ME-3 work, run `cargo test --all-features` to include instrumentation coverage.
- For export/import, plan fixture-based integration tests and ensure round-trip idempotency.

